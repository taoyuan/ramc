function (Requestor, _requestor) {
  /**
   * {{{name}}} service.
   * @module api/{{{name}}}
   * @version {{{version}}}
   */

  /**
   * Constructs a new {{&name}}.
   * @alias module:api/{{&name}}
   * @class
   * @param {module:Requestor} [requestor] Optional API client implementation to use,
   * default to {@link module:Requestor#instance} if unspecified.
   */
  function {{&name}}(requestor) {
  	if (!(this instanceof {{&name}})) {
  	  return new {{&name}}(requestor);
  	}

    this.requestor = requestor || _requestor;

    {{#methods}}
      this.{{methodName}} = function ({{#parameters}}{{#required}}{{^isSingleton}}{{&camelCaseName}},{{/isSingleton}}{{/required}}{{/parameters}}{{#hasOptionalParameter}}opts,{{/hasOptionalParameter}}cb) {
        {{#parameters}}
          {{#required}}
            // verify the required parameter '{{name}}' is set
            if ({{&camelCaseName}} == undefined || {{&camelCaseName}} == null) {
              throw new Error("Missing the required parameter '{{camelCaseName}}' when calling {{../methodName}}");
            }
          {{/required}}
        {{/parameters}}
        {{#hasOptionalParameter}}
          if (typeof opts === 'function') {
            cb = opts;
            opts = null;
          }
          opts = opts || {};
        {{/hasOptionalParameter}}

        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};

        {{#parameters}}
          {{#isPathParameter}}
            pathParams['{{&name}}'] = {{^required}}opts['{{/required}}{{&camelCaseName}}{{^required}}']{{/required}};
          {{/isPathParameter}}
        {{/parameters}}

        {{#parameters}}
          {{#isQueryParameter}}
            {{#isSingleton}}
                queryParams['{{&name}}'] = '{{&singleton}}';
            {{/isSingleton}}
            {{^isSingleton}}
              {{#isPatternType}}
                throws new Error('Unsupported parameter')
              {{/isPatternType}}
              {{^isPatternType}}
                queryParams['{{&name}}'] = {{^required}}opts['{{/required}}{{&camelCaseName}}{{^required}}']{{/required}};
              {{/isPatternType}}
            {{/isSingleton}}
          {{/isQueryParameter}}
        {{/parameters}}

        {{#parameters}}
          {{#isHeaderParameter}}
            {{#isSingleton}}
              headerParams['{{&name}}'] = '{{&singleton}}';
            {{/isSingleton}}
            {{^isSingleton}}
              headerParams['{{&name}}'] = {{^required}}opts['{{/required}}{{{camelCaseName}}}{{^required}}']{{/required}};
            {{/isSingleton}}
          {{/isHeaderParameter}}
        {{/parameters}}

        {{#parameters}}
          {{#isFormParameter}}
            {{#isSingleton}}
              formParams['{{&name}}'] = '{{&singleton}}';
            {{/isSingleton}}
            {{^isSingleton}}
              formParams['{{&name}}'] = {{^required}}opts['{{/required}}{{&camelCaseName}}{{^required}}']{{/required}};
            {{/isSingleton}}
          {{/isFormParameter}}
        {{/parameters}}

        var postBody = null;
        {{#parameters}}
          {{#if isBodyParameter}}
            postBody = {{^required}}opts['{{/required}}{{&camelCaseName}}{{^required}}']{{/required}};
          {{/if}}
        {{/parameters}}

        var authNames = [];
        var contentTypes = [{{#contentTypes}}'{{&.}}'{{#unless @last}},{{/unless}}{{/contentTypes}}];
        var accepts = [{{#accepts}}'{{&.}}'{{#unless @last}},{{/unless}}{{/accepts}}];
        var returnType = Object;

        return this.requestor.request(
          '{{&path}}', '{{&method}}',
          pathParams, queryParams, headerParams, formParams, postBody,
          authNames, contentTypes, accepts, returnType, cb
        );
      };
    {{/methods}}

  }

  return {{&name}};
}
